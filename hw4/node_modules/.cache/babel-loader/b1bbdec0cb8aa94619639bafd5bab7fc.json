{"ast":null,"code":"import * as d3 from \"d3\";\nimport \"./style.css\";\n\nconst draw = props => {\n  /*\n    d3.select('.vis-barchart > *').remove();\n    const data = props.data;\n    const margin = {top: 20, right: 20, bottom: 30, left: 40};\n    const width = props.width - margin.left - margin.right;\n    const height = props.height - margin.top - margin.bottom;\n    let svg = d3.select('.vis-barchart').append('svg')\n            .attr('width',width + margin.left + margin.right)\n            .attr('height',height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n     // format the data\n    data.forEach(function(d) {\n        d.age = +d.age;\n    });\n     // Scale the range of the data in the domains\n    let x = d3.scaleBand()\n          .range([0, width])\n          .padding(0.1);\n    let y = d3.scaleLinear()\n          .range([height, 0]);\n    x.domain(data.map(function(d) { return d.name; }));\n    y.domain([0, d3.max(data, function(d) { return d.age; })]);\n     // append the rectangles for the bar chart\n    svg.selectAll(\".bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", function(d) { return x(d.name); })\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", function(d) { return y(d.age); })\n        .attr(\"height\", function(d) { return height - y(d.age); });\n     // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n     // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n      */\n  d3.select(\"#svgID\").remove(); //删除整个SVG\n\n  d3.select(\"#svgID\").selectAll(\"*\").remove(); //清空SVG中的内容\n\n  const {\n    data,\n    h,\n    w,\n    attr1,\n    attr2\n  } = props;\n  const margin = {\n    top: 100,\n    right: 120,\n    bottom: 100,\n    left: 120\n  };\n  const innerWidth = w - margin.left - margin.right;\n  const innerHeight = h - margin.top - margin.bottom;\n  const xAxisLabel = attr1;\n  const yAxisLabel = attr2;\n\n  let xValue = d => d[props.attr1];\n\n  let yValue = d => d[props.attr2];\n  /*\n  let xScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, xValue)]) // \"extent\" is equivalent to ;\n    .range([0, innerWidth])\n    .nice();\n  let yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, yValue)].reverse()) // remember to use reverse() to make y-axis start from the bottom;\n    .range([0, innerHeight])\n    .nice();\n  /*\n  const svg = d3\n    .select(\".vis-linechart\")\n    .append(\"svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    .attr(\"id\", \"svgID\")\n    .style(\"margin-left\", 0);\n   const g = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n    .attr(\"id\", \"maingroup\");\n   const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth).tickPadding(10); // .tickPadding is used to prevend intersection of ticks;\n  const xAxis = d3.axisBottom(xScale).tickSize(-innerHeight).tickPadding(10);\n   let yAxisGroup = g.append(\"g\").call(yAxis).attr(\"id\", \"yaxis\");\n  yAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"transform\", `rotate(-90)`)\n    .attr(\"x\", -innerHeight / 2)\n    .attr(\"y\", -60)\n    .attr(\"fill\", \"#333333\")\n    .text(yAxisLabel)\n    .attr(\"text-anchor\", \"middle\"); // Make label at the middle of axis.\n  yAxisGroup.selectAll(\".domain\").remove(); // we can select multiple tags using comma to seperate them and we can use space to signify nesting;\n   let xAxisGroup = g\n    .append(\"g\")\n    .call(xAxis)\n    .attr(\"transform\", `translate(${0}, ${innerHeight})`)\n    .attr(\"id\", \"xaxis\");\n  xAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"y\", 60)\n    .attr(\"x\", innerWidth / 2)\n    .attr(\"fill\", \"#333333\")\n    .text(xAxisLabel);\n  xAxisGroup.selectAll(\".domain\").remove();\n    */\n\n  /*\n  let circleupdates = g.selectAll(\"circle\").data(data);\n  let circleenter = circleupdates\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", (d) => xScale(xValue(d)))\n    .attr(\"cy\", (d) => yScale(yValue(d)))\n    .attr(\"r\", 5)\n    .attr(\"fill\", \"green\");\n  */\n\n};\n\nexport default draw;","map":{"version":3,"sources":["/Users/panqp/Documents/React/test/src/charts/BarChart/vis.js"],"names":["d3","draw","props","select","remove","selectAll","data","h","w","attr1","attr2","margin","top","right","bottom","left","innerWidth","innerHeight","xAxisLabel","yAxisLabel","xValue","d","yValue"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAO,aAAP;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CAF,EAAAA,EAAE,CAACG,MAAH,CAAU,QAAV,EAAoBC,MAApB,GAhDsB,CAgDQ;;AAC9BJ,EAAAA,EAAE,CAACG,MAAH,CAAU,QAAV,EAAoBE,SAApB,CAA8B,GAA9B,EAAmCD,MAAnC,GAjDsB,CAiDuB;;AAC7C,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA,CAAR;AAAWC,IAAAA,CAAX;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,MAA+BR,KAArC;AACA,QAAMS,MAAM,GAAG;AAAEC,IAAAA,GAAG,EAAE,GAAP;AAAYC,IAAAA,KAAK,EAAE,GAAnB;AAAwBC,IAAAA,MAAM,EAAE,GAAhC;AAAqCC,IAAAA,IAAI,EAAE;AAA3C,GAAf;AACA,QAAMC,UAAU,GAAGR,CAAC,GAAGG,MAAM,CAACI,IAAX,GAAkBJ,MAAM,CAACE,KAA5C;AACA,QAAMI,WAAW,GAAGV,CAAC,GAAGI,MAAM,CAACC,GAAX,GAAiBD,MAAM,CAACG,MAA5C;AACA,QAAMI,UAAU,GAAGT,KAAnB;AACA,QAAMU,UAAU,GAAGT,KAAnB;;AAEA,MAAIU,MAAM,GAAIC,CAAD,IAAOA,CAAC,CAACnB,KAAK,CAACO,KAAP,CAArB;;AACA,MAAIa,MAAM,GAAID,CAAD,IAAOA,CAAC,CAACnB,KAAK,CAACQ,KAAP,CAArB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;;;;;;;;AAUD,CA3HD;;AA6HA,eAAeT,IAAf","sourcesContent":["import * as d3 from \"d3\";\nimport \"./style.css\";\n\nconst draw = (props) => {\n  /*\n    d3.select('.vis-barchart > *').remove();\n    const data = props.data;\n    const margin = {top: 20, right: 20, bottom: 30, left: 40};\n    const width = props.width - margin.left - margin.right;\n    const height = props.height - margin.top - margin.bottom;\n    let svg = d3.select('.vis-barchart').append('svg')\n            .attr('width',width + margin.left + margin.right)\n            .attr('height',height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // format the data\n    data.forEach(function(d) {\n        d.age = +d.age;\n    });\n\n    // Scale the range of the data in the domains\n    let x = d3.scaleBand()\n          .range([0, width])\n          .padding(0.1);\n    let y = d3.scaleLinear()\n          .range([height, 0]);\n    x.domain(data.map(function(d) { return d.name; }));\n    y.domain([0, d3.max(data, function(d) { return d.age; })]);\n\n    // append the rectangles for the bar chart\n    svg.selectAll(\".bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", function(d) { return x(d.name); })\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", function(d) { return y(d.age); })\n        .attr(\"height\", function(d) { return height - y(d.age); });\n\n    // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n\n    */\n  d3.select(\"#svgID\").remove(); //删除整个SVG\n  d3.select(\"#svgID\").selectAll(\"*\").remove(); //清空SVG中的内容\n  const { data, h, w, attr1, attr2 } = props;\n  const margin = { top: 100, right: 120, bottom: 100, left: 120 };\n  const innerWidth = w - margin.left - margin.right;\n  const innerHeight = h - margin.top - margin.bottom;\n  const xAxisLabel = attr1;\n  const yAxisLabel = attr2;\n\n  let xValue = (d) => d[props.attr1];\n  let yValue = (d) => d[props.attr2];\n  /*\n  let xScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, xValue)]) // \"extent\" is equivalent to ;\n    .range([0, innerWidth])\n    .nice();\n  let yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, yValue)].reverse()) // remember to use reverse() to make y-axis start from the bottom;\n    .range([0, innerHeight])\n    .nice();\n  /*\n  const svg = d3\n    .select(\".vis-linechart\")\n    .append(\"svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    .attr(\"id\", \"svgID\")\n    .style(\"margin-left\", 0);\n\n  const g = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n    .attr(\"id\", \"maingroup\");\n\n  const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth).tickPadding(10); // .tickPadding is used to prevend intersection of ticks;\n  const xAxis = d3.axisBottom(xScale).tickSize(-innerHeight).tickPadding(10);\n\n  let yAxisGroup = g.append(\"g\").call(yAxis).attr(\"id\", \"yaxis\");\n  yAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"transform\", `rotate(-90)`)\n    .attr(\"x\", -innerHeight / 2)\n    .attr(\"y\", -60)\n    .attr(\"fill\", \"#333333\")\n    .text(yAxisLabel)\n    .attr(\"text-anchor\", \"middle\"); // Make label at the middle of axis.\n  yAxisGroup.selectAll(\".domain\").remove(); // we can select multiple tags using comma to seperate them and we can use space to signify nesting;\n\n  let xAxisGroup = g\n    .append(\"g\")\n    .call(xAxis)\n    .attr(\"transform\", `translate(${0}, ${innerHeight})`)\n    .attr(\"id\", \"xaxis\");\n  xAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"y\", 60)\n    .attr(\"x\", innerWidth / 2)\n    .attr(\"fill\", \"#333333\")\n    .text(xAxisLabel);\n  xAxisGroup.selectAll(\".domain\").remove();\n    */\n  /*\n  let circleupdates = g.selectAll(\"circle\").data(data);\n  let circleenter = circleupdates\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", (d) => xScale(xValue(d)))\n    .attr(\"cy\", (d) => yScale(yValue(d)))\n    .attr(\"r\", 5)\n    .attr(\"fill\", \"green\");\n */\n};\n\nexport default draw;\n"]},"metadata":{},"sourceType":"module"}