{"ast":null,"code":"import * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport React, { Component } from \"react\";\n\nconst draw = props => {\n  const {\n    data,\n    years\n  } = props;\n  data = data.filter(d => d[\"Country Name\"] === country);\n  d3.select(\".vis-linechart > *\").remove();\n  let margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n  const width = props.width - margin.left - margin.right;\n  const height = props.height - margin.top - margin.bottom;\n  let svg = d3.select(\".vis-linechart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  data.forEach(function (d) {\n    d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n    d.count = +d.count;\n  }); // Add X axis --> it is a date format\n\n  let x = d3.scaleTime().domain(d3.extent(data, function (d) {\n    return d.date;\n  })).range([0, width]);\n  svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n  var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n    return +d.count;\n  })]).range([height, 0]);\n  svg.append(\"g\").call(d3.axisLeft(y)); // Add the line\n\n  svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n    return x(d.date);\n  }).y(function (d) {\n    return y(d.count);\n  }));\n  /*\n  let xScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, xValue)]) // \"extent\" is equivalent to ;\n    .range([0, innerWidth])\n    .nice();\n  let yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, yValue)].reverse()) // remember to use reverse() to make y-axis start from the bottom;\n    .range([0, innerHeight])\n    .nice();\n  /*\n  const svg = d3\n    .select(\".vis-linechart\")\n    .append(\"svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    .attr(\"id\", \"svgID\")\n    .style(\"margin-left\", 0);\n   const g = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n    .attr(\"id\", \"maingroup\");\n   const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth).tickPadding(10); // .tickPadding is used to prevend intersection of ticks;\n  const xAxis = d3.axisBottom(xScale).tickSize(-innerHeight).tickPadding(10);\n   let yAxisGroup = g.append(\"g\").call(yAxis).attr(\"id\", \"yaxis\");\n  yAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"transform\", `rotate(-90)`)\n    .attr(\"x\", -innerHeight / 2)\n    .attr(\"y\", -60)\n    .attr(\"fill\", \"#333333\")\n    .text(yAxisLabel)\n    .attr(\"text-anchor\", \"middle\"); // Make label at the middle of axis.\n  yAxisGroup.selectAll(\".domain\").remove(); // we can select multiple tags using comma to seperate them and we can use space to signify nesting;\n   let xAxisGroup = g\n    .append(\"g\")\n    .call(xAxis)\n    .attr(\"transform\", `translate(${0}, ${innerHeight})`)\n    .attr(\"id\", \"xaxis\");\n  xAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"y\", 60)\n    .attr(\"x\", innerWidth / 2)\n    .attr(\"fill\", \"#333333\")\n    .text(xAxisLabel);\n  xAxisGroup.selectAll(\".domain\").remove();\n    */\n\n  /*\n  let circleupdates = g.selectAll(\"circle\").data(data);\n  let circleenter = circleupdates\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", (d) => xScale(xValue(d)))\n    .attr(\"cy\", (d) => yScale(yValue(d)))\n    .attr(\"r\", 5)\n    .attr(\"fill\", \"green\");\n  */\n};\n\nexport default draw;","map":{"version":3,"sources":["/Users/panqp/Documents/React/hw4/src/charts/LineChart/vis.js"],"names":["d3","_","React","Component","draw","props","data","years","filter","d","country","select","remove","margin","top","right","bottom","left","width","height","svg","append","attr","forEach","date","timeParse","count","x","scaleTime","domain","extent","range","call","axisBottom","y","scaleLinear","max","axisLeft","datum","line"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport React, { Component } from \"react\";\nconst draw = (props) => {\n  const { data, years } = props;\n  data = data.filter((d) => d[\"Country Name\"] === country);\n  d3.select(\".vis-linechart > *\").remove();\n  let margin = { top: 20, right: 20, bottom: 30, left: 40 };\n  const width = props.width - margin.left - margin.right;\n  const height = props.height - margin.top - margin.bottom;\n  let svg = d3\n    .select(\".vis-linechart\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  data.forEach(function (d) {\n    d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n    d.count = +d.count;\n  });\n\n  // Add X axis --> it is a date format\n  let x = d3\n    .scaleTime()\n    .domain(\n      d3.extent(data, function (d) {\n        return d.date;\n      })\n    )\n    .range([0, width]);\n  svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(x));\n\n  // Add Y axis\n  var y = d3\n    .scaleLinear()\n    .domain([\n      0,\n      d3.max(data, function (d) {\n        return +d.count;\n      }),\n    ])\n    .range([height, 0]);\n  svg.append(\"g\").call(d3.axisLeft(y));\n\n  // Add the line\n  svg\n    .append(\"path\")\n    .datum(data)\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"steelblue\")\n    .attr(\"stroke-width\", 1.5)\n    .attr(\n      \"d\",\n      d3\n        .line()\n        .x(function (d) {\n          return x(d.date);\n        })\n        .y(function (d) {\n          return y(d.count);\n        })\n    );\n\n  /*\n  let xScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, xValue)]) // \"extent\" is equivalent to ;\n    .range([0, innerWidth])\n    .nice();\n  let yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, yValue)].reverse()) // remember to use reverse() to make y-axis start from the bottom;\n    .range([0, innerHeight])\n    .nice();\n  /*\n  const svg = d3\n    .select(\".vis-linechart\")\n    .append(\"svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    .attr(\"id\", \"svgID\")\n    .style(\"margin-left\", 0);\n\n  const g = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n    .attr(\"id\", \"maingroup\");\n\n  const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth).tickPadding(10); // .tickPadding is used to prevend intersection of ticks;\n  const xAxis = d3.axisBottom(xScale).tickSize(-innerHeight).tickPadding(10);\n\n  let yAxisGroup = g.append(\"g\").call(yAxis).attr(\"id\", \"yaxis\");\n  yAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"transform\", `rotate(-90)`)\n    .attr(\"x\", -innerHeight / 2)\n    .attr(\"y\", -60)\n    .attr(\"fill\", \"#333333\")\n    .text(yAxisLabel)\n    .attr(\"text-anchor\", \"middle\"); // Make label at the middle of axis.\n  yAxisGroup.selectAll(\".domain\").remove(); // we can select multiple tags using comma to seperate them and we can use space to signify nesting;\n\n  let xAxisGroup = g\n    .append(\"g\")\n    .call(xAxis)\n    .attr(\"transform\", `translate(${0}, ${innerHeight})`)\n    .attr(\"id\", \"xaxis\");\n  xAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"y\", 60)\n    .attr(\"x\", innerWidth / 2)\n    .attr(\"fill\", \"#333333\")\n    .text(xAxisLabel);\n  xAxisGroup.selectAll(\".domain\").remove();\n    */\n  /*\n  let circleupdates = g.selectAll(\"circle\").data(data);\n  let circleenter = circleupdates\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", (d) => xScale(xValue(d)))\n    .attr(\"cy\", (d) => yScale(yValue(d)))\n    .attr(\"r\", 5)\n    .attr(\"fill\", \"green\");\n */\n};\n\nexport default draw;\n"]},"metadata":{},"sourceType":"module"}