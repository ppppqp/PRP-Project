{"ast":null,"code":"import * as d3 from \"d3\";\nimport { select, geoNaturalEarth1, scaleSqrt, max, format, selectAll, event, tsv, json } from \"d3\";\nimport { color } from \"../../d3/Color\";\nimport tip from \"d3-tip\";\nimport { feature } from \"topojson\";\nimport \"./style.css\";\nimport \"./earth.css\";\nimport \"./d3tip.css\";\n\nconst draw = props => {\n  d3.select(\"#mainsvg\").remove(); //删除整个SVG\n\n  d3.select(\"#mainsvg\").selectAll(\"*\").remove(); //清空SVG中的内容\n\n  const {\n    data,\n    h,\n    w,\n    attr,\n    year,\n    onSelectCountry\n  } = props;\n  let svg = d3.select(\".vis-barchart\").append(\"svg\") //.attr(\"viewBox\", [0, 0, w, h])\n  .attr(\"height\", h).attr(\"width\", w).attr(\"class\", \"svgs\").attr(\"id\", \"mainsvg\");\n  const width = +svg.attr(\"width\");\n  const height = +svg.attr(\"height\"); //const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n  //const innerWidth = width - margin.left - margin.right;\n  //const innerHeight = height - margin.top - margin.bottom;\n\n  const innerWidth = width;\n  const innerHeight = height;\n  const g = svg.append(\"g\").attr(\"id\", \"maingroup\"); //.attr(\"transform\", `translate(${margin.top}, ${margin.right})`);\n\n  const projection = d3.geoNaturalEarth1();\n  const pathGenerator = d3.geoPath().projection(projection);\n  svg.call(zoom().on(\"zoom\", () => {\n    g.attr(\"transform\", event.transform);\n  })); // setting up the tip tool;\n\n  /*\n  const tip = d3\n    .tip()\n    .attr(\"class\", \"d3-tip\")\n    .html(function (d) {\n      return d.properties.name;\n    });\n  svg.call(tip);\n    */\n\n  let lastid = undefined;\n  Promise.all([tsv(\"https://unpkg.com/world-atlas@1.1.4/world/50m.tsv\"), json(\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\")]).then(([tsvData, topoJSONdata]) => {\n    // parses tsvData to extract country names for base map titles\n    const countryName = {};\n    tsvData.forEach(d => {\n      countryName[d.iso_n3] = d.name;\n    }); // draws a path for each country with countryName as title (shown on hover)\n\n    var worldmeta = feature(topoJSONdata, topoJSONdata.objects.countries);\n    projection.fitSize([innerWidth, innerHeight], worldmeta);\n    const paths = g.selectAll(\"path\").data(worldmeta.features, d => d.properties.name).enter().append(\"path\").attr(\"d\", pathGenerator).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).text(d => countryName[d.id]).on(\"click\", function (d) {\n      onSelectCountry(d3.select(this).text());\n    }).on(\"mouseover\", function (d) {\n      //console.log(this);\n      d3.select(this).attr(\"opacity\", 0.5).attr(\"stroke\", \"white\").attr(\"stroke-width\", 6);\n    }).on(\"mouseout\", function (d) {\n      //不能用箭头函数\n      d3.select(this).attr(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n    }); //].append(\"title\")\n    //.text((d) => countryName[d.id]);\n\n    const radiusValue = d => +d.datum > 0 ? +d.datum : -+d.datum;\n\n    const sign = d => +d.datum > 0 ? 1 : -1;\n\n    const sizeScale = scaleSqrt().domain([0, max(data, d => +d.datum, radiusValue)]).range([0, 15]);\n    g.selectAll(\"circle\").data(data).enter().append(\"circle\").attr(\"transform\", function (d) {\n      return \"translate(\" + projection([d.long, d.lat]) + \")\";\n    }) //})\n    .attr(\"r\", d => sizeScale(radiusValue(d))).attr(\"fill\", d => color(sign(d))).attr(\"opacity\", 0.8).append(\"title\").text(d => d.country + \": \" + d.datum //+ \": \" + format(\",\")(d[`${caseType}`])\n    );\n  });\n};\n\nexport default draw;","map":{"version":3,"sources":["/Users/panqp/Documents/GitHub/PRP-Project/hw4/src/charts/BarChart/vis.js"],"names":["d3","select","geoNaturalEarth1","scaleSqrt","max","format","selectAll","event","tsv","json","color","tip","feature","draw","props","remove","data","h","w","attr","year","onSelectCountry","svg","append","width","height","innerWidth","innerHeight","g","projection","pathGenerator","geoPath","call","zoom","on","transform","lastid","undefined","Promise","all","then","tsvData","topoJSONdata","countryName","forEach","d","iso_n3","name","worldmeta","objects","countries","fitSize","paths","features","properties","enter","text","id","radiusValue","datum","sign","sizeScale","domain","range","long","lat","country"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\n\nimport {\n  select,\n  geoNaturalEarth1,\n  scaleSqrt,\n  max,\n  format,\n  selectAll,\n  event,\n  tsv,\n  json,\n} from \"d3\";\nimport { color } from \"../../d3/Color\";\nimport tip from \"d3-tip\";\nimport { feature } from \"topojson\";\nimport \"./style.css\";\nimport \"./earth.css\";\nimport \"./d3tip.css\";\nconst draw = (props) => {\n  d3.select(\"#mainsvg\").remove(); //删除整个SVG\n  d3.select(\"#mainsvg\").selectAll(\"*\").remove(); //清空SVG中的内容\n  const { data, h, w, attr, year, onSelectCountry } = props;\n  let svg = d3\n    .select(\".vis-barchart\")\n    .append(\"svg\")\n    //.attr(\"viewBox\", [0, 0, w, h])\n    .attr(\"height\", h)\n    .attr(\"width\", w)\n    .attr(\"class\", \"svgs\")\n    .attr(\"id\", \"mainsvg\");\n\n  const width = +svg.attr(\"width\");\n  const height = +svg.attr(\"height\");\n  //const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n  //const innerWidth = width - margin.left - margin.right;\n  //const innerHeight = height - margin.top - margin.bottom;\n  const innerWidth = width;\n  const innerHeight = height;\n\n  const g = svg.append(\"g\").attr(\"id\", \"maingroup\");\n  //.attr(\"transform\", `translate(${margin.top}, ${margin.right})`);\n  const projection = d3.geoNaturalEarth1();\n  const pathGenerator = d3.geoPath().projection(projection);\n  svg.call(\n    zoom().on(\"zoom\", () => {\n      g.attr(\"transform\", event.transform);\n    })\n  );\n  // setting up the tip tool;\n  /*\n  const tip = d3\n    .tip()\n    .attr(\"class\", \"d3-tip\")\n    .html(function (d) {\n      return d.properties.name;\n    });\n  svg.call(tip);\n    */\n\n  let lastid = undefined;\n  Promise.all([\n    tsv(\"https://unpkg.com/world-atlas@1.1.4/world/50m.tsv\"),\n    json(\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n  ]).then(([tsvData, topoJSONdata]) => {\n    // parses tsvData to extract country names for base map titles\n    const countryName = {};\n    tsvData.forEach((d) => {\n      countryName[d.iso_n3] = d.name;\n    });\n\n    // draws a path for each country with countryName as title (shown on hover)\n    var worldmeta = feature(topoJSONdata, topoJSONdata.objects.countries);\n    projection.fitSize([innerWidth, innerHeight], worldmeta);\n\n    const paths = g\n      .selectAll(\"path\")\n      .data(worldmeta.features, (d) => d.properties.name)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", pathGenerator)\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 1)\n      .text((d) => countryName[d.id])\n      .on(\"click\", function (d) {\n        onSelectCountry(d3.select(this).text());\n      })\n      .on(\"mouseover\", function (d) {\n        //console.log(this);\n        d3.select(this)\n          .attr(\"opacity\", 0.5)\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 6);\n      })\n      .on(\"mouseout\", function (d) {\n        //不能用箭头函数\n        d3.select(this)\n          .attr(\"opacity\", 1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1);\n      });\n    //].append(\"title\")\n    //.text((d) => countryName[d.id]);\n    const radiusValue = (d) => (+d.datum > 0 ? +d.datum : -+d.datum);\n    const sign = (d) => (+d.datum > 0 ? 1 : -1);\n    const sizeScale = scaleSqrt()\n      .domain([0, max(data, (d) => +d.datum, radiusValue)])\n      .range([0, 15]);\n    g.selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"transform\", function (d) {\n        return \"translate(\" + projection([d.long, d.lat]) + \")\";\n      })\n      //})\n      .attr(\"r\", (d) => sizeScale(radiusValue(d)))\n      .attr(\"fill\", (d) => color(sign(d)))\n      .attr(\"opacity\", 0.8)\n      .append(\"title\")\n      .text(\n        (d) => d.country + \": \" + d.datum //+ \": \" + format(\",\")(d[`${caseType}`])\n      );\n  });\n};\n\nexport default draw;\n"]},"metadata":{},"sourceType":"module"}