{"ast":null,"code":"import * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nconst draw = props => {\n  /*\n    let data = [];\n    if (props.data !== null) {\n        data = _.cloneDeep(props.data.activities);\n    }\n    d3.select('.vis-linechart > *').remove();\n    let margin = { top: 20, right: 20, bottom: 30, left: 40 }\n    const width = props.width - margin.left - margin.right;;\n    const height = props.height - margin.top - margin.bottom;\n    let svg = d3.select(\".vis-linechart\")\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n     data.forEach(function (d) {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.count = +d.count;\n    });\n    \n    // Add X axis --> it is a date format\n    let x = d3.scaleTime()\n        .domain(d3.extent(data, function (d) { return d.date; }))\n        .range([0, width]);\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n     // Add Y axis\n    var y = d3.scaleLinear()\n        .domain([0, d3.max(data, function (d) { return +d.count; })])\n        .range([height, 0]);\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n     // Add the line\n    svg.append(\"path\")\n        .datum(data)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"d\", d3.line()\n            .x(function (d) { return x(d.date) })\n            .y(function (d) { return y(d.count) })\n        )\n     */\n  d3.select(\"#svgID\").remove(); //删除整个SVG\n\n  d3.select(\"#svgID\").selectAll(\"*\").remove(); //清空SVG中的内容\n\n  const {\n    data,\n    h,\n    w,\n    attr1,\n    attr2\n  } = this.props;\n  const margin = {\n    top: 100,\n    right: 120,\n    bottom: 100,\n    left: 120\n  };\n  const innerWidth = w - margin.left - margin.right;\n  const innerHeight = h - margin.top - margin.bottom;\n  const xAxisLabel = attr1;\n  const yAxisLabel = attr2;\n\n  let xValue = d => d[this.props.attr1];\n\n  let yValue = d => d[this.props.attr2];\n\n  let xScale = d3.scaleLinear().domain([0, d3.max(data, xValue)]) // \"extent\" is equivalent to ;\n  .range([0, innerWidth]).nice();\n  let yScale = d3.scaleLinear().domain([0, d3.max(data, yValue)].reverse()) // remember to use reverse() to make y-axis start from the bottom;\n  .range([0, innerHeight]).nice();\n  const svg = d3.select(\".vis-linechart\").append(\"svg\").attr(\"width\", w).attr(\"height\", h).attr(\"id\", \"svgID\").style(\"margin-left\", 0);\n  const g = svg.append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`).attr(\"id\", \"maingroup\");\n  const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth).tickPadding(10); // .tickPadding is used to prevend intersection of ticks;\n\n  const xAxis = d3.axisBottom(xScale).tickSize(-innerHeight).tickPadding(10);\n  let yAxisGroup = g.append(\"g\").call(yAxis).attr(\"id\", \"yaxis\");\n  yAxisGroup.append(\"text\").attr(\"font-size\", \"2em\").attr(\"transform\", `rotate(-90)`).attr(\"x\", -innerHeight / 2).attr(\"y\", -60).attr(\"fill\", \"#333333\").text(yAxisLabel).attr(\"text-anchor\", \"middle\"); // Make label at the middle of axis.\n\n  yAxisGroup.selectAll(\".domain\").remove(); // we can select multiple tags using comma to seperate them and we can use space to signify nesting;\n\n  let xAxisGroup = g.append(\"g\").call(xAxis).attr(\"transform\", `translate(${0}, ${innerHeight})`).attr(\"id\", \"xaxis\");\n  xAxisGroup.append(\"text\").attr(\"font-size\", \"2em\").attr(\"y\", 60).attr(\"x\", innerWidth / 2).attr(\"fill\", \"#333333\").text(xAxisLabel);\n  xAxisGroup.selectAll(\".domain\").remove();\n  let circleupdates = g.selectAll(\"circle\").data(data);\n  let circleenter = circleupdates.enter().append(\"circle\").attr(\"cx\", d => xScale(xValue(d))).attr(\"cy\", d => yScale(yValue(d))).attr(\"r\", 5).attr(\"fill\", \"green\");\n  console.log(\"what?\");\n};\n\nexport default draw;","map":{"version":3,"sources":["/Users/panqp/Documents/React/test/src/charts/LineChart/vis.js"],"names":["d3","_","draw","props","select","remove","selectAll","data","h","w","attr1","attr2","margin","top","right","bottom","left","innerWidth","innerHeight","xAxisLabel","yAxisLabel","xValue","d","yValue","xScale","scaleLinear","domain","max","range","nice","yScale","reverse","svg","append","attr","style","g","yAxis","axisLeft","tickSize","tickPadding","xAxis","axisBottom","yAxisGroup","call","text","xAxisGroup","circleupdates","circleenter","enter","console","log"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nconst draw = (props) => {\n  /*\n    let data = [];\n    if (props.data !== null) {\n        data = _.cloneDeep(props.data.activities);\n    }\n    d3.select('.vis-linechart > *').remove();\n    let margin = { top: 20, right: 20, bottom: 30, left: 40 }\n    const width = props.width - margin.left - margin.right;;\n    const height = props.height - margin.top - margin.bottom;\n    let svg = d3.select(\".vis-linechart\")\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    data.forEach(function (d) {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.count = +d.count;\n    });\n    \n    // Add X axis --> it is a date format\n    let x = d3.scaleTime()\n        .domain(d3.extent(data, function (d) { return d.date; }))\n        .range([0, width]);\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    // Add Y axis\n    var y = d3.scaleLinear()\n        .domain([0, d3.max(data, function (d) { return +d.count; })])\n        .range([height, 0]);\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n    // Add the line\n    svg.append(\"path\")\n        .datum(data)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"d\", d3.line()\n            .x(function (d) { return x(d.date) })\n            .y(function (d) { return y(d.count) })\n        )\n\n    */\n\n  d3.select(\"#svgID\").remove(); //删除整个SVG\n  d3.select(\"#svgID\").selectAll(\"*\").remove(); //清空SVG中的内容\n  const { data, h, w, attr1, attr2 } = this.props;\n  const margin = { top: 100, right: 120, bottom: 100, left: 120 };\n  const innerWidth = w - margin.left - margin.right;\n  const innerHeight = h - margin.top - margin.bottom;\n  const xAxisLabel = attr1;\n  const yAxisLabel = attr2;\n  let xValue = (d) => d[this.props.attr1];\n  let yValue = (d) => d[this.props.attr2];\n  let xScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, xValue)]) // \"extent\" is equivalent to ;\n    .range([0, innerWidth])\n    .nice();\n  let yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(data, yValue)].reverse()) // remember to use reverse() to make y-axis start from the bottom;\n    .range([0, innerHeight])\n    .nice();\n  const svg = d3\n    .select(\".vis-linechart\")\n    .append(\"svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    .attr(\"id\", \"svgID\")\n    .style(\"margin-left\", 0);\n\n  const g = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n    .attr(\"id\", \"maingroup\");\n\n  const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth).tickPadding(10); // .tickPadding is used to prevend intersection of ticks;\n  const xAxis = d3.axisBottom(xScale).tickSize(-innerHeight).tickPadding(10);\n\n  let yAxisGroup = g.append(\"g\").call(yAxis).attr(\"id\", \"yaxis\");\n  yAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"transform\", `rotate(-90)`)\n    .attr(\"x\", -innerHeight / 2)\n    .attr(\"y\", -60)\n    .attr(\"fill\", \"#333333\")\n    .text(yAxisLabel)\n    .attr(\"text-anchor\", \"middle\"); // Make label at the middle of axis.\n  yAxisGroup.selectAll(\".domain\").remove(); // we can select multiple tags using comma to seperate them and we can use space to signify nesting;\n\n  let xAxisGroup = g\n    .append(\"g\")\n    .call(xAxis)\n    .attr(\"transform\", `translate(${0}, ${innerHeight})`)\n    .attr(\"id\", \"xaxis\");\n  xAxisGroup\n    .append(\"text\")\n    .attr(\"font-size\", \"2em\")\n    .attr(\"y\", 60)\n    .attr(\"x\", innerWidth / 2)\n    .attr(\"fill\", \"#333333\")\n    .text(xAxisLabel);\n  xAxisGroup.selectAll(\".domain\").remove();\n  let circleupdates = g.selectAll(\"circle\").data(data);\n  let circleenter = circleupdates\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", (d) => xScale(xValue(d)))\n    .attr(\"cy\", (d) => yScale(yValue(d)))\n    .attr(\"r\", 5)\n    .attr(\"fill\", \"green\");\n  console.log(\"what?\");\n};\n\nexport default draw;\n"]},"metadata":{},"sourceType":"module"}