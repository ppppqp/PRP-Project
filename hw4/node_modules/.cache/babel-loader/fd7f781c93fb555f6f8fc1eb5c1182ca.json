{"ast":null,"code":"import * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nconst draw = ({\n  data\n}) => {\n  d3.select(\".vis-linechart > *\").remove();\n  let margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n  const width = props.width - margin.left - margin.right;\n  const height = props.height - margin.top - margin.bottom;\n  let svg = d3.select(\".vis-linechart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  data.forEach(function (d) {\n    d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n    d.count = +d.count;\n  }); // Add X axis --> it is a date format\n\n  let x = d3.scaleTime().domain(d3.extent(2010, 2014)).range([0, width]);\n  svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n  var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n    return +d.count;\n  })]).range([height, 0]);\n  svg.append(\"g\").call(d3.axisLeft(y)); // Add the line\n\n  svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n    return x(d.date);\n  }).y(function (d) {\n    return y(d.count);\n  }));\n};\n\nexport default draw;","map":{"version":3,"sources":["/Users/panqp/Documents/React/hw4/src/charts/LineChart/vis.js"],"names":["d3","_","draw","data","select","remove","margin","top","right","bottom","left","width","props","height","svg","append","attr","forEach","d","date","timeParse","count","x","scaleTime","domain","extent","range","call","axisBottom","y","scaleLinear","max","axisLeft","datum","line"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nconst draw = ({ data }) => {\n  d3.select(\".vis-linechart > *\").remove();\n  let margin = { top: 20, right: 20, bottom: 30, left: 40 };\n  const width = props.width - margin.left - margin.right;\n  const height = props.height - margin.top - margin.bottom;\n  let svg = d3\n    .select(\".vis-linechart\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  data.forEach(function (d) {\n    d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n    d.count = +d.count;\n  });\n\n  // Add X axis --> it is a date format\n  let x = d3.scaleTime().domain(d3.extent(2010, 2014)).range([0, width]);\n  svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(x));\n\n  // Add Y axis\n  var y = d3\n    .scaleLinear()\n    .domain([\n      0,\n      d3.max(data, function (d) {\n        return +d.count;\n      }),\n    ])\n    .range([height, 0]);\n  svg.append(\"g\").call(d3.axisLeft(y));\n\n  // Add the line\n  svg\n    .append(\"path\")\n    .datum(data)\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"steelblue\")\n    .attr(\"stroke-width\", 1.5)\n    .attr(\n      \"d\",\n      d3\n        .line()\n        .x(function (d) {\n          return x(d.date);\n        })\n        .y(function (d) {\n          return y(d.count);\n        })\n    );\n};\n\nexport default draw;\n"]},"metadata":{},"sourceType":"module"}