{"ast":null,"code":"import * as d3 from \"d3\";\nimport \"./style.css\";\n\nconst draw = props => {\n  /*\n    d3.select('.vis-barchart > *').remove();\n    const data = props.data;\n    const margin = {top: 20, right: 20, bottom: 30, left: 40};\n    const width = props.width - margin.left - margin.right;\n    const height = props.height - margin.top - margin.bottom;\n    let svg = d3.select('.vis-barchart').append('svg')\n            .attr('width',width + margin.left + margin.right)\n            .attr('height',height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n     // format the data\n    data.forEach(function(d) {\n        d.age = +d.age;\n    });\n     // Scale the range of the data in the domains\n    let x = d3.scaleBand()\n          .range([0, width])\n          .padding(0.1);\n    let y = d3.scaleLinear()\n          .range([height, 0]);\n    x.domain(data.map(function(d) { return d.name; }));\n    y.domain([0, d3.max(data, function(d) { return d.age; })]);\n     // append the rectangles for the bar chart\n    svg.selectAll(\".bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", function(d) { return x(d.name); })\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", function(d) { return y(d.age); })\n        .attr(\"height\", function(d) { return height - y(d.age); });\n     // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n     // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n      */\n};\n\nexport default draw;","map":{"version":3,"sources":["/Users/panqp/Documents/React/test/src/charts/BarChart/vis.js"],"names":["d3","draw","props"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAO,aAAP;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CD,CAhDD;;AAkDA,eAAeD,IAAf","sourcesContent":["import * as d3 from \"d3\";\nimport \"./style.css\";\n\nconst draw = (props) => {\n  /*\n    d3.select('.vis-barchart > *').remove();\n    const data = props.data;\n    const margin = {top: 20, right: 20, bottom: 30, left: 40};\n    const width = props.width - margin.left - margin.right;\n    const height = props.height - margin.top - margin.bottom;\n    let svg = d3.select('.vis-barchart').append('svg')\n            .attr('width',width + margin.left + margin.right)\n            .attr('height',height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // format the data\n    data.forEach(function(d) {\n        d.age = +d.age;\n    });\n\n    // Scale the range of the data in the domains\n    let x = d3.scaleBand()\n          .range([0, width])\n          .padding(0.1);\n    let y = d3.scaleLinear()\n          .range([height, 0]);\n    x.domain(data.map(function(d) { return d.name; }));\n    y.domain([0, d3.max(data, function(d) { return d.age; })]);\n\n    // append the rectangles for the bar chart\n    svg.selectAll(\".bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", function(d) { return x(d.name); })\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", function(d) { return y(d.age); })\n        .attr(\"height\", function(d) { return height - y(d.age); });\n\n    // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n\n    */\n};\n\nexport default draw;\n"]},"metadata":{},"sourceType":"module"}