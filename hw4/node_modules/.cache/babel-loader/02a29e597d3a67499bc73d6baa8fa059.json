{"ast":null,"code":"import * as d3 from \"d3\";\nimport { zoom, event } from \"d3\";\nimport d3Tip from \"d3-tip\";\nimport { feature } from \"topojson\";\nimport \"./style.css\";\nimport \"./earth.css\";\nimport \"./d3tip.css\";\n\nconst draw = props => {\n  /*\n    d3.select('.vis-barchart > *').remove();\n    const data = props.data;\n    const margin = {top: 20, right: 20, bottom: 30, left: 40};\n    const width = props.width - margin.left - margin.right;\n    const height = props.height - margin.top - margin.bottom;\n    let svg = d3.select('.vis-barchart').append('svg')\n            .attr('width',width + margin.left + margin.right)\n            .attr('height',height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n     // format the data\n    data.forEach(function(d) {\n        d.age = +d.age;\n    });\n     // Scale the range of the data in the domains\n    let x = d3.scaleBand()\n          .range([0, width])\n          .padding(0.1);\n    let y = d3.scaleLinear()\n          .range([height, 0]);\n    x.domain(data.map(function(d) { return d.name; }));\n    y.domain([0, d3.max(data, function(d) { return d.age; })]);\n     // append the rectangles for the bar chart\n    svg.selectAll(\".bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", function(d) { return x(d.name); })\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", function(d) { return y(d.age); })\n        .attr(\"height\", function(d) { return height - y(d.age); });\n     // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n     // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n      */\n  //d3.select(\"#svgID\").remove(); //删除整个SVG\n  //d3.select(\"#svgID\").selectAll(\"*\").remove(); //清空SVG中的内容\n  const {\n    data,\n    h,\n    w,\n    attr1,\n    attr2\n  } = props;\n  let svg = d3.select(\".vis-barchart\").append(\"svg\").attr(\"height\", h).attr(\"width\", w).attr(\"class\", \"svgs\").attr(\"id\", \"mainsvg\");\n  const width = +svg.attr(\"width\");\n  const height = +svg.attr(\"height\");\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 20,\n    left: 20\n  };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const g = svg.append(\"g\").attr(\"id\", \"maingroup\").attr(\"transform\", `translate(${margin.top}, ${margin.right})`); // convert dataPath to svgPath;\n  // go to https://github.com/d3/d3-geo for more different projections;\n  //const projection = d3.geoMercator();\n  //const projection = d3.geoOrthographic();\n  //const projection = d3.geoStereographic();\n  //const projection = d3.geoEquirectangular();\n\n  const projection = d3.geoNaturalEarth1(); //const projection = d3.geoTransverseMercator();\n\n  const pathGenerator = d3.geoPath().projection(projection); // setting up the tip tool;\n\n  /*\n  const tip = d3\n    .tip()\n    .attr(\"class\", \"d3-tip\")\n    .html(function (d) {\n      return d.properties.name;\n    });\n  svg.call(tip);\n    */\n\n  let worldmeta;\n  let lastid = undefined; // convert topo-json to geo-json;\n\n  worldmeta = feature(data, data.objects.countries); // this code is really important if you want to fit your geoPaths (map) in your SVG element;\n\n  projection.fitSize([innerWidth, innerHeight], worldmeta); // perform data-join;\n\n  const paths = g.selectAll(\"path\").data(worldmeta.features, d => d.properties.name).enter().append(\"path\").attr(\"d\", pathGenerator).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).on(\"mouseover\", function (d) {\n    d3.select(this).attr(\"opacity\", 0.5).attr(\"stroke\", \"white\").attr(\"stroke-width\", 3);\n  }).on(\"mouseout\", function (d) {\n    //不能用箭头函数\n    d3.select(this).attr(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n  });\n  svg.call(zoom().on(\"zoom\", () => {\n    g.attr(\"transform\", event.transform);\n  }));\n  /*\n  .on(\"contextmenu\", function (d) {\n    //d3.event.preventDefault();\n    if (lastid !== d.properties.name) {\n      tip.show(d);\n      lastid = d.properties.name;\n    } else {\n      tip.hide(d);\n    }\n  });\n  */\n};\n\nexport default draw;","map":{"version":3,"sources":["/Users/panqp/Documents/React/hw4/src/charts/BarChart/vis.js"],"names":["d3","zoom","event","d3Tip","feature","draw","props","data","h","w","attr1","attr2","svg","select","append","attr","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","g","projection","geoNaturalEarth1","pathGenerator","geoPath","worldmeta","lastid","undefined","objects","countries","fitSize","paths","selectAll","features","d","properties","name","enter","on","call","transform"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport { zoom, event } from \"d3\";\nimport d3Tip from \"d3-tip\";\nimport { feature } from \"topojson\";\nimport \"./style.css\";\nimport \"./earth.css\";\nimport \"./d3tip.css\";\nconst draw = (props) => {\n  /*\n    d3.select('.vis-barchart > *').remove();\n    const data = props.data;\n    const margin = {top: 20, right: 20, bottom: 30, left: 40};\n    const width = props.width - margin.left - margin.right;\n    const height = props.height - margin.top - margin.bottom;\n    let svg = d3.select('.vis-barchart').append('svg')\n            .attr('width',width + margin.left + margin.right)\n            .attr('height',height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // format the data\n    data.forEach(function(d) {\n        d.age = +d.age;\n    });\n\n    // Scale the range of the data in the domains\n    let x = d3.scaleBand()\n          .range([0, width])\n          .padding(0.1);\n    let y = d3.scaleLinear()\n          .range([height, 0]);\n    x.domain(data.map(function(d) { return d.name; }));\n    y.domain([0, d3.max(data, function(d) { return d.age; })]);\n\n    // append the rectangles for the bar chart\n    svg.selectAll(\".bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", function(d) { return x(d.name); })\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", function(d) { return y(d.age); })\n        .attr(\"height\", function(d) { return height - y(d.age); });\n\n    // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n\n    */\n  //d3.select(\"#svgID\").remove(); //删除整个SVG\n  //d3.select(\"#svgID\").selectAll(\"*\").remove(); //清空SVG中的内容\n  const { data, h, w, attr1, attr2 } = props;\n\n  let svg = d3\n    .select(\".vis-barchart\")\n    .append(\"svg\")\n    .attr(\"height\", h)\n    .attr(\"width\", w)\n    .attr(\"class\", \"svgs\")\n    .attr(\"id\", \"mainsvg\");\n  const width = +svg.attr(\"width\");\n  const height = +svg.attr(\"height\");\n  const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const g = svg\n    .append(\"g\")\n    .attr(\"id\", \"maingroup\")\n    .attr(\"transform\", `translate(${margin.top}, ${margin.right})`);\n\n  // convert dataPath to svgPath;\n  // go to https://github.com/d3/d3-geo for more different projections;\n  //const projection = d3.geoMercator();\n  //const projection = d3.geoOrthographic();\n  //const projection = d3.geoStereographic();\n  //const projection = d3.geoEquirectangular();\n  const projection = d3.geoNaturalEarth1();\n  //const projection = d3.geoTransverseMercator();\n  const pathGenerator = d3.geoPath().projection(projection);\n\n  // setting up the tip tool;\n  /*\n  const tip = d3\n    .tip()\n    .attr(\"class\", \"d3-tip\")\n    .html(function (d) {\n      return d.properties.name;\n    });\n  svg.call(tip);\n    */\n  let worldmeta;\n  let lastid = undefined;\n\n  // convert topo-json to geo-json;\n  worldmeta = feature(data, data.objects.countries);\n\n  // this code is really important if you want to fit your geoPaths (map) in your SVG element;\n  projection.fitSize([innerWidth, innerHeight], worldmeta);\n\n  // perform data-join;\n  const paths = g\n    .selectAll(\"path\")\n    .data(worldmeta.features, (d) => d.properties.name)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", pathGenerator)\n    .attr(\"stroke\", \"black\")\n    .attr(\"stroke-width\", 1)\n    .on(\"mouseover\", function (d) {\n      d3.select(this)\n        .attr(\"opacity\", 0.5)\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 3);\n    })\n    .on(\"mouseout\", function (d) {\n      //不能用箭头函数\n      d3.select(this)\n        .attr(\"opacity\", 1)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", 1);\n    });\n\n  svg.call(\n    zoom().on(\"zoom\", () => {\n      g.attr(\"transform\", event.transform);\n    })\n  );\n  /*\n  .on(\"contextmenu\", function (d) {\n    //d3.event.preventDefault();\n    if (lastid !== d.properties.name) {\n      tip.show(d);\n      lastid = d.properties.name;\n    } else {\n      tip.hide(d);\n    }\n  });\n  */\n};\n\nexport default draw;\n"]},"metadata":{},"sourceType":"module"}