{"ast":null,"code":"import * as d3 from \"d3\";\nimport { select, geoNaturalEarth1, scaleSqrt, max, format, selectAll, tsv, json } from \"d3\";\nimport { color } from \"../../d3/Color\";\nimport d3Tip from \"d3-tip\";\nimport { feature } from \"topojson\";\nimport \"./style.css\";\nimport \"./earth.css\";\nimport \"./d3tip.css\";\n\nconst draw = props => {\n  //d3.select(\"#svgID\").remove(); //删除整个SVG\n  //d3.select(\"#svgID\").selectAll(\"*\").remove(); //清空SVG中的内容\n  const {\n    data,\n    h,\n    w,\n    attr,\n    year\n  } = props;\n  let svg = d3.select(\".vis-barchart\").append(\"svg\").attr(\"height\", h).attr(\"width\", w).attr(\"class\", \"svgs\").attr(\"id\", \"mainsvg\");\n  const width = +svg.attr(\"width\");\n  const height = +svg.attr(\"height\");\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 20,\n    left: 20\n  };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const g = svg.append(\"g\").attr(\"id\", \"maingroup\").attr(\"transform\", `translate(${margin.top}, ${margin.right})`);\n  const projection = d3.geoNaturalEarth1();\n  const pathGenerator = d3.geoPath().projection(projection); // setting up the tip tool;\n\n  /*\n  const tip = d3\n    .tip()\n    .attr(\"class\", \"d3-tip\")\n    .html(function (d) {\n      return d.properties.name;\n    });\n  svg.call(tip);\n    */\n\n  let lastid = undefined;\n  Promise.all([tsv(\"https://unpkg.com/world-atlas@1.1.4/world/50m.tsv\"), json(\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\")]).then(([tsvData, topoJSONdata]) => {\n    // parses tsvData to extract country names for base map titles\n    const countryName = {};\n    tsvData.forEach(d => {\n      countryName[d.iso_n3] = d.name;\n    }); // draws a path for each country with countryName as title (shown on hover)\n\n    var worldmeta = feature(topoJSONdata, topoJSONdata.objects.countries);\n    projection.fitSize([innerWidth, innerHeight], worldmeta);\n    g.selectAll(\"path\").data(worldmeta.features).enter().append(\"path\").attr(\"class\", \"country\").attr(\"d\", pathGenerator).attr(\"stroke\", \"grey\").attr(\"stroke-width\", 1).on(\"mouseover\", function (d) {\n      d3.select(this).attr(\"opacity\", 0.5).attr(\"stroke\", \"white\").attr(\"stroke-width\", 3);\n    }).on(\"mouseout\", function (d) {\n      //不能用箭头函数\n      d3.select(this).attr(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n    }); //.append(\"title\")\n    //.text((d) => countryName[d.id]);\n  }); // draws a path for each country with countryName as title (shown on hover)\n\n  /*\n    const countries = feature(topoJSONdata, topoJSONdata.objects.countries);\n    g.selectAll(\"path\")\n      .data(countries.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"country\")\n      .attr(\"d\", pathGenerator)\n      .append(\"title\")\n      .text((d) => countryName[d.id]);\n       */\n\n  const radiusValue = d => d[`${year}`];\n\n  const sizeScale = scaleSqrt().domain([0, max(data, d => d[`${year}`], radiusValue)]).range([0, 5]);\n  /*\n  g.selectAll(\"circle\")\n    .data(data)\n    .enter()\n    .append(\"circle\")\n    .attr(\"class\", \"country-circle\")\n    // setting x and y coordiantes by translating country coordinate data to pixels\n    .attr(\"transform\", function (d) {\n      return (\n        \"translate(\" + projection([d.countryInfo.long, d.countryInfo.lat]) + \")\"\n      );\n    })\n    .attr(\"r\", (d) => sizeScale(radiusValue(d)))\n    .attr(\"fill\", color(attr))\n    .append(\"title\");\n  //.text(\n  // (d) => d.country + \" \" + caseTitle + \": \" + format(\",\")(d[`${caseType}`])\n  //);\n  */\n\n  /*\n  svg.call(\n    zoom().on(\"zoom\", () => {\n      g.attr(\"transform\", event.transform);\n    })\n  );\n  */\n\n  /*\n  .on(\"contextmenu\", function (d) {\n    //d3.event.preventDefault();\n    if (lastid !== d.properties.name) {\n      tip.show(d);\n      lastid = d.properties.name;\n    } else {\n      tip.hide(d);\n    }\n  });\n  */\n};\n\nexport default draw;","map":{"version":3,"sources":["/Users/panqp/Documents/React/hw4/src/charts/BarChart/vis.js"],"names":["d3","select","geoNaturalEarth1","scaleSqrt","max","format","selectAll","tsv","json","color","d3Tip","feature","draw","props","data","h","w","attr","year","svg","append","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","g","projection","pathGenerator","geoPath","lastid","undefined","Promise","all","then","tsvData","topoJSONdata","countryName","forEach","d","iso_n3","name","worldmeta","objects","countries","fitSize","features","enter","on","radiusValue","sizeScale","domain","range"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport {\n  select,\n  geoNaturalEarth1,\n  scaleSqrt,\n  max,\n  format,\n  selectAll,\n  tsv,\n  json,\n} from \"d3\";\nimport { color } from \"../../d3/Color\";\nimport d3Tip from \"d3-tip\";\nimport { feature } from \"topojson\";\nimport \"./style.css\";\nimport \"./earth.css\";\nimport \"./d3tip.css\";\nconst draw = (props) => {\n  //d3.select(\"#svgID\").remove(); //删除整个SVG\n  //d3.select(\"#svgID\").selectAll(\"*\").remove(); //清空SVG中的内容\n  const { data, h, w, attr, year } = props;\n  let svg = d3\n    .select(\".vis-barchart\")\n    .append(\"svg\")\n    .attr(\"height\", h)\n    .attr(\"width\", w)\n    .attr(\"class\", \"svgs\")\n    .attr(\"id\", \"mainsvg\");\n  const width = +svg.attr(\"width\");\n  const height = +svg.attr(\"height\");\n  const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const g = svg\n    .append(\"g\")\n    .attr(\"id\", \"maingroup\")\n    .attr(\"transform\", `translate(${margin.top}, ${margin.right})`);\n  const projection = d3.geoNaturalEarth1();\n  const pathGenerator = d3.geoPath().projection(projection);\n\n  // setting up the tip tool;\n  /*\n  const tip = d3\n    .tip()\n    .attr(\"class\", \"d3-tip\")\n    .html(function (d) {\n      return d.properties.name;\n    });\n  svg.call(tip);\n    */\n\n  let lastid = undefined;\n  Promise.all([\n    tsv(\"https://unpkg.com/world-atlas@1.1.4/world/50m.tsv\"),\n    json(\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n  ]).then(([tsvData, topoJSONdata]) => {\n    // parses tsvData to extract country names for base map titles\n    const countryName = {};\n    tsvData.forEach((d) => {\n      countryName[d.iso_n3] = d.name;\n    });\n\n    // draws a path for each country with countryName as title (shown on hover)\n    var worldmeta = feature(topoJSONdata, topoJSONdata.objects.countries);\n    projection.fitSize([innerWidth, innerHeight], worldmeta);\n\n    g.selectAll(\"path\")\n      .data(worldmeta.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"country\")\n      .attr(\"d\", pathGenerator)\n\n      .attr(\"stroke\", \"grey\")\n      .attr(\"stroke-width\", 1)\n      .on(\"mouseover\", function (d) {\n        d3.select(this)\n          .attr(\"opacity\", 0.5)\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 3);\n      })\n      .on(\"mouseout\", function (d) {\n        //不能用箭头函数\n        d3.select(this)\n          .attr(\"opacity\", 1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1);\n      });\n    //.append(\"title\")\n    //.text((d) => countryName[d.id]);\n  });\n\n  // draws a path for each country with countryName as title (shown on hover)\n  /*\n    const countries = feature(topoJSONdata, topoJSONdata.objects.countries);\n    g.selectAll(\"path\")\n      .data(countries.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"country\")\n      .attr(\"d\", pathGenerator)\n      .append(\"title\")\n      .text((d) => countryName[d.id]);\n       */\n\n  const radiusValue = (d) => d[`${year}`];\n\n  const sizeScale = scaleSqrt()\n    .domain([0, max(data, (d) => d[`${year}`], radiusValue)])\n    .range([0, 5]);\n  /*\n  g.selectAll(\"circle\")\n    .data(data)\n    .enter()\n    .append(\"circle\")\n    .attr(\"class\", \"country-circle\")\n    // setting x and y coordiantes by translating country coordinate data to pixels\n    .attr(\"transform\", function (d) {\n      return (\n        \"translate(\" + projection([d.countryInfo.long, d.countryInfo.lat]) + \")\"\n      );\n    })\n    .attr(\"r\", (d) => sizeScale(radiusValue(d)))\n    .attr(\"fill\", color(attr))\n    .append(\"title\");\n  //.text(\n  // (d) => d.country + \" \" + caseTitle + \": \" + format(\",\")(d[`${caseType}`])\n  //);\n*/\n  /*\n  svg.call(\n    zoom().on(\"zoom\", () => {\n      g.attr(\"transform\", event.transform);\n    })\n  );\n*/\n  /*\n  .on(\"contextmenu\", function (d) {\n    //d3.event.preventDefault();\n    if (lastid !== d.properties.name) {\n      tip.show(d);\n      lastid = d.properties.name;\n    } else {\n      tip.hide(d);\n    }\n  });\n  */\n};\n\nexport default draw;\n"]},"metadata":{},"sourceType":"module"}